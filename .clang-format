---
Language: Cpp  # Apply to C++ files

# Base formatting style: Chromium (can be modified below)
# Chromium is similar to LLVM but with some minor differences.
# If you prefer LLVM, change this to `BasedOnStyle: LLVM`.
BasedOnStyle: Chromium  

# --- Indentation & Alignment ---
AccessModifierOffset: -2  # Indent public/private/protected by 2 spaces
AlignAfterOpenBracket: Align  # Align arguments after open bracket
AlignConsecutiveMacros: false  # Do not align consecutive macros
AlignConsecutiveAssignments: false  # Do not align assignments
AlignConsecutiveBitFields: false  # Do not align bit fields
AlignConsecutiveDeclarations: false  # Do not align consecutive variable declarations
AlignEscapedNewlines: DontAlign  # Don't align escaped newlines (e.g., `\` in macros)
AlignOperands: DontAlign  # Do not align operators (e.g., `+`, `-`, `=`)
AlignTrailingComments: false  # Do not align trailing comments

# --- Line Wrapping ---
AllowAllArgumentsOnNextLine: true  # Allow function arguments on the next line
AllowAllConstructorInitializersOnNextLine: false  # Break constructor initializers
AllowAllParametersOfDeclarationOnNextLine: true  # Allow function parameters on next line
AllowShortEnumsOnASingleLine: false  # Enforce multiline enums
AllowShortBlocksOnASingleLine: Empty  # Allow `{}` for empty blocks only
AllowShortCaseLabelsOnASingleLine: false  # Do not allow single-line `case` labels
AllowShortLambdasOnASingleLine: All  # Allow short lambdas to be inline
AllowShortIfStatementsOnASingleLine: Never  # Always break `if` statements
AllowShortLoopsOnASingleLine: false  # Always break loops

# --- Function & Template Formatting ---
AlwaysBreakAfterDefinitionReturnType: None  # Keep function return types on the same line
AlwaysBreakAfterReturnType: None  # Don't break return type
AlwaysBreakBeforeMultilineStrings: true  # Always break before multiline strings
AlwaysBreakTemplateDeclarations: Yes  # Break template declarations

# --- Brace Wrapping ---
BraceWrapping:
  AfterCaseLabel: false  # Don't force `{}` after `case`
  AfterClass: true  # Always break after class/struct definitions
  AfterControlStatement: MultiLine  # Wrap control statements only when multiline
  AfterEnum: true  # Always break after `enum`
  AfterFunction: true  # Break after function definitions
  AfterNamespace: true  # Break after `namespace`
  AfterStruct: true  # Break after `struct`
  AfterUnion: true  # Break after `union`
  AfterExternBlock: true  # Break after `extern "C"` blocks
  BeforeCatch: false  # No newline before `catch`
  BeforeElse: false  # No newline before `else`
  BeforeLambdaBody: true  # Enforce `{}` on lambda bodies
  BeforeWhile: false  # No newline before `while` in do-while loops
  IndentBraces: false  # Do not indent braces

# --- Line Breaks ---
BreakBeforeBinaryOperators: NonAssignment  # Break before binary operators, except assignments
BreakBeforeBraces: Custom  # Custom brace wrapping (configured above)
BreakInheritanceList: BeforeComma  # Break inheritance lists before `,`
BreakBeforeTernaryOperators: true  # Break before `?` and `:`
BreakConstructorInitializersBeforeComma: true  # Break constructor initializers before `,`
BreakConstructorInitializers: BeforeComma  # Place constructor initializers before `,`
BreakAfterJavaFieldAnnotations: true  # Break after Java field annotations
BreakStringLiterals: true  # Break long string literals

# --- Column & Formatting Rules ---
ColumnLimit: 80  # Wrap lines at 80 columns
CompactNamespaces: false  # Don't use `namespace X { namespace Y {}}`
ConstructorInitializerAllOnOneLineOrOnePerLine: false  # Break constructor initializers
ConstructorInitializerIndentWidth: 4  # Indent constructor initializers
ContinuationIndentWidth: 4  # Indentation for line continuations
Cpp11BracedListStyle: true  # Format `{}` initializers like `{1, 2, 3}` properly
DeriveLineEnding: false  # Do not auto-detect line endings
DerivePointerAlignment: false  # Don't auto-detect pointer alignment
DisableFormat: false  # Allow `clang-format` (use `true` to disable formatting globally)
ExperimentalAutoDetectBinPacking: false  # Disable experimental bin-packing detection
FixNamespaceComments: true  # Ensure closing namespace comments

# --- Preprocessor Formatting ---
IndentPPDirectives: None  # Do not indent preprocessor directives (`#ifdef` stays at column 0)
MacroBlockBegin: '#ifdef'  # Prevent formatting inside `#ifdef`
MacroBlockEnd: '#endif'  # Prevent formatting inside `#endif`
IndentExternBlock: NoIndent  # Do not indent `extern "C" {}`

# --- Includes ---
IncludeBlocks: Regroup  # Group include headers together
IncludeCategories:
  - Regex: '^<[a-z_]+>'  # Standard library includes first
    Priority: -1
  - Regex: '^<.+\.h(pp)?>'  # System headers
    Priority: 1
  - Regex: '^<.*'  # Remaining includes
    Priority: 2
  - Regex: '.*'  # Catch-all
    Priority: 3
IncludeIsMainRegex: ''
IncludeIsMainSourceRegex: ''
SortIncludes: true  # Sort includes alphabetically
SortUsingDeclarations: true  # Sort `using` declarations

# --- Pointer & Whitespace Rules ---
PointerAlignment: Left  # `int* ptr;` instead of `int *ptr;`
ReflowComments: true  # Reflow long comments
SpacesBeforeTrailingComments: 2  # Space before `// comments`
SpacesInAngles: false  # `std::vector<int>` instead of `std::vector< int >`
SpacesInConditionalStatement: false  # `if(x)` instead of `if ( x )`
SpacesInContainerLiterals: false  # No extra space in `{1, 2, 3}`
SpacesInCStyleCastParentheses: false  # No extra space in `(int)x`
SpacesInParentheses: false  # `func(x)` instead of `func( x )`
SpacesInSquareBrackets: false  # `arr[i]` instead of `arr[ i ]`
SpaceBeforeSquareBrackets: false  # `int arr[];` instead of `int arr []`
TabWidth: 8  # Tabs are treated as 8 spaces
UseCRLF: false  # Use LF (`\n`) line endings
UseTab: Never  # Do not use tabs for indentation

# --- Macros & Custom Formatting Rules ---
WhitespaceSensitiveMacros:
  - STRINGIZE
  - PP_STRINGIZE
  - BOOST_PP_STRINGIZE
StatementMacros:
  - Q_UNUSED
  - QT_REQUIRE_VERSION
ForEachMacros:
  - foreach
  - Q_FOREACH
  - BOOST_FOREACH